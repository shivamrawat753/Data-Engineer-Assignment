# -*- coding: utf-8 -*-
"""Mugs_Data_Engineer_Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BVc7yJvNzSJRwd7jHdsZbeBiWg_APabg
"""

#Importing Libraries

import json
import csv
from datetime import datetime

# Function to read and print sample JSON objects from a file
def print_sample_json(file_path, num_samples=3):
    with open(file_path, 'r') as file:
        for i, line in enumerate(file):
            if i >= num_samples:
                break
            print(json.loads(line))
            print()

# Print the first JSON object from each file
print("Patient.ndjson:")
print_sample_json("Patient.ndjson")

print("\nCondition.ndjson:")
print_sample_json("Condition.ndjson")

print("\nEncounter.ndjson:")
print_sample_json("Encounter.ndjson")

print("\nEncounterICU.ndjson:")
print_sample_json("EncounterICU.ndjson")

# Function to read ndjson file and return a list of JSON objects
def read_ndjson(file_path):
    with open(file_path, 'r') as file:
        return [json.loads(line) for line in file]

# Function to convert ISO 8601 datetime string to Unix timestamp
def iso8601_to_unix(iso_string):
    dt = datetime.fromisoformat(iso_string)
    return int(dt.timestamp())

# Read Patient.ndjson to create a dictionary with patient_id as key and patient details as value
def read_patients(file_path):
    patients = {}
    patient_data = read_ndjson(file_path)
    for patient in patient_data:
        patients[patient['id']] = patient
    return patients

# Read Patient.ndjson to create a dictionary with patient_id as key and patient details as value
patients = read_patients("Patient.ndjson")

# Initialize a dictionary to store conditions associated with each patient
patient_conditions = {}

# Read Condition.ndjson and organize conditions by patient_id
condition_data = read_ndjson("Condition.ndjson")
for condition in condition_data:
    patient_id = condition['subject']['reference'].split('/')[-1]
    if patient_id in patients:  # Check if patient ID exists in the patients dictionary
        if patient_id not in patient_conditions:
            patient_conditions[patient_id] = []
        patient_conditions[patient_id].append(condition)

# Read Encounter.ndjson and EncounterICU.ndjson to create a dictionary with encounter_id as key and encounter details as value
encounters = {}
encounter_data = read_ndjson("Encounter.ndjson")
encounter_icu_data = read_ndjson("EncounterICU.ndjson")
for encounter in encounter_data:
    encounters[encounter['id']] = encounter
for encounter in encounter_icu_data:
    encounters[encounter['id']] = encounter

# Initialize a dictionary to store estimated time for each condition
condition_estimated_time = {}

# Read Condition.ndjson and assign estimated time for each condition using corresponding encounter
for condition in condition_data:
    encounter_id = condition['encounter']['reference'].split('/')[-1]
    if encounter_id in encounters:
        start_time = encounters[encounter_id]['period']['start']
        condition_estimated_time[condition['id']] = iso8601_to_unix(start_time)
    else:
        condition_estimated_time[condition['id']] = None

# Write data to CSV file
with open('patient_conditions.csv', mode='w', newline='') as file:
    writer = csv.DictWriter(file, fieldnames=['pid', 'time', 'code', 'description'])
    writer.writeheader()
    for patient_id, conditions in patient_conditions.items():
        for condition in conditions:
            time = condition_estimated_time[condition['id']]
            code = condition['code']['coding'][0]['code']
            description = condition['code']['coding'][0]['display']
            writer.writerow({'pid': patient_id, 'time': time, 'code': code, 'description': description})

import pandas as pd
df = pd.read_csv('patient_conditions.csv')
df.head()